
==============================
How to Use 2-matrix_divided.py
==============================

This module defines a function ``matrix_divided(matrix, div)``
that divides all the elements of matrix by div.

Usage
=====

``matrix_divided(...)`` returns a matrix containing the results
of all elements of ``matrix`` divided by ``div``.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [9, 18, 27],
    ...     [36, 45, 54]
    ... ]
    >>> print(matrix_divided(matrix, 18))
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

Note: quotients are rounded to a maximum of two decimal places.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix is left unchanged.

::

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

This function can work with floating-point numbers too.

::

    >>> matrix = [
    ...     [2.1, -34.3, 3.4],
    ...     [7.0, 91.3, -63.7]
    ... ]
    >>> print(matrix_divided(matrix, 7))
    [[0.3, -4.9, 0.49], [1.0, 13.04, -9.1]]

Integers and floats can be combined.

::

    >>> matrix = [
    ...     [1, -2.2, 3, 4.4, 5],
    ...     [-6.6, 7.00, 8, 9.999, 10]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

Handling Invalid Entries
==============

The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

::

    >>> matrix = "something"
    >>> print(matrix_divided(matrix, 9))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note: An empty list will also raise a TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 12))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

However, an empty list of lists will succeed.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

A TypeError is also raised if ``matrix`` is not a list of lists.

::

    >>> matrix = [15, 27, 38]
    >>> print(matrix_divided(matrix, 17))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

A TypeError will be raised if any element in ``matrix`` is neither ints
nor floats.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "any", 6]
    ... ]
    >>> print(matrix_divided(matrix, 5))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Finally, a TypeError is raised if any rows are of different sizes.

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Handling Invalid Divisors
================

The ``div`` parameter must be either an int or float. Otherwise, a TypeError
is raised.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "anything"))
    Traceback (most recent call last):
    TypeError: div must be a number

::

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
