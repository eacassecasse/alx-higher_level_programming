
============================
How to Use 4-print_square.py
============================

This module defines a square-printing function.

Usage
=====

Squares are printed using the ``#`` character. The ``size`` parameter
represents the height and width of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(5)
    #####
    #####
    #####
    #####
    #####

::

    >>> print_square(15)
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############
    ###############

If ``size`` is zero, the function prints nothing.

::

    >>> print_square(0)

Handling Invalid Sizes
=============

A TypeError is raised if the ``size`` parameter is not an integer.

::

    >>> print_square("string")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(6.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

A ValueError is raised if ``size`` is less than zero.

::

    >>> print_square(-1)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Note: Type-checking occurs before value-checking, so
in case of having a negative floating-point number a
TypeError is raised before ValueError.

::

    >>> print_square(-10.8)
    Traceback (most recent call last):
    TypeError: size must be an integer

The `size` argument is not optional.

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
